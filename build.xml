<project name="qdemo" default="all">

	<property name="lib.dir" value="${basedir}/lib"/>
	<property name="checkstyle.home"
            value="${basedir}/tools/checkstyle" />
  <property name="findbugs.home" value="${basedir}/tools/findbugs-1.3.9" />

   <path id="findbugs.path">
     <fileset dir="${findbugs.home}/lib" includes="*.jar"/>
   </path>

	<property name="tools.lib.dir" value="${lib.dir}/tools"/>

    <property name="src.dir" value="${basedir}/src"/>
    <property name="src.lib.dir" value="${lib.dir}/production"/>

    <property name="test.dir" value="${basedir}/test"/>
    <property name="test.lib.dir" value="${lib.dir}/test"/>

    <property name="websrc.dir" value="${basedir}/webapp"/>

    <property name="build.dir" value="${basedir}/build"/>
    <property name="src.classes.dir" value="${build.dir}/production"/>
    <property name="test.classes.dir" value="${build.dir}/test"/>
	<property name="emma.classes.dir" value="${build.dir}/emma"/>
    <property name="war.dir" value="${build.dir}/war"/>
    <property name="reports.dir" value="${build.dir}/reports"/>
    <property name="test.reports.dir" value="${reports.dir}/junit"/>
    <property name="checkstyle.reports.dir" value="${reports.dir}/checkstyle"/>
    <property name="findbugs.reports.dir" value="${reports.dir}/findbugs"/>

    <property name="web.classes.dir" value="${war.dir}/WEB-INF/classes"/>

    <path id="compile.src.classpath">
        <fileset dir="${src.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="compile.test.classpath">
        <path refid="compile.src.classpath"/>
        <fileset dir="${test.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement location="${test.classes.dir}"/>
    </path>

	<path id="tools.classpath">
        <fileset dir="${tools.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="run.server.classpath">
        <fileset dir="${test.lib.dir}">
             <include name="**/*.jar"/>
         </fileset>
        <pathelement location="${test.classes.dir}"/>
    </path>

    <target name="-init">
        <mkdir dir="${src.classes.dir}"/>
        <mkdir dir="${war.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
		<mkdir dir="${emma.classes.dir}"/>
        <mkdir dir="${web.classes.dir}"/>
        <mkdir dir="${test.reports.dir}"/>
        <mkdir dir="${checkstyle.reports.dir}"/>
        <mkdir dir="${findbugs.reports.dir}"/>
    </target>

    <target name="-clean">
        <delete dir="${build.dir}" failonerror="false"/>
    </target>

    <target name="-compile.src">
        <javac classpathref="compile.src.classpath" memorymaximumsize="128m" fork="true" encoding="UTF-8"
               srcdir="${src.dir}"
               destdir="${src.classes.dir}" debug="true" source="1.5" target="1.5"/>
        <copy todir="${src.classes.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>
    </target>

    <target name="-compile.test">
        <javac classpathref="compile.test.classpath" memorymaximumsize="128m" fork="true" encoding="UTF-8"
               destdir="${test.classes.dir}" debug="true">
            <src path="${test.dir}"/>
            <classpath path="${src.classes.dir}"/>
        </javac>
    </target>
    
    <taskdef resource="checkstyletask.properties" classpath="${checkstyle.home}/checkstyle-5.3-all.jar"/>
    <target name="-checkstyle"
            description="Generates a report of code convention violations.">

      <checkstyle config="${checkstyle.home}/sun_checks.xml"
                  failureProperty="checkstyle.failure"
                  failOnViolation="false">
        <formatter type="xml" tofile="${checkstyle.reports.dir}/checkstyle_report.xml"/>
        <fileset dir="${src.dir}" includes="**/*.java"/>
      </checkstyle>

      <style in="${checkstyle.reports.dir}/checkstyle_report.xml" out="${checkstyle.reports.dir}/checkstyle_report.html" style="${checkstyle.home}/contrib/checkstyle-simple.xsl"/>

    </target>
    
    <typedef name="findbugs"
                 classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
                 classpathref="findbugs.path"
                 loaderref="findbugs.path.loader"
                 />
                 
    <target name="-findbugs">
      <findbugs home="${findbugs.home}"
                output="html"
				jvmArgs="-Xms256m -Xmx800m"
                outputFile="${findbugs.reports.dir}/findbugs.html" >
        <sourcePath path="${srcdir}" />
        <class location="${src.classes.dir}" />
      </findbugs>
    </target>
    

    <target name="-build.war">
        <copy todir="${web.classes.dir}">
            <fileset dir="${src.classes.dir}"/>
        </copy>
        <copy todir="${war.dir}">
            <fileset dir="${websrc.dir}"/>
        </copy>
		<copy todir="${war.dir}/WEB-INF/lib">
			<fileset dir="${src.lib.dir}"/>
		</copy>
    </target>

    <target name="-package">
        <war destfile="${build.dir}/qdemo.war">
            <fileset dir="${war.dir}"/>
        </war>
    </target>

    <target name="-run.unit.test">
        <junit printsummary="yes" haltonfailure="yes" fork="true" forkmode="perBatch">
            <classpath>
                <pathelement location="${emma.classes.dir}"/>
                <pathelement location="${test.classes.dir}"/>
				<pathelement location="${tools.lib.dir}/emma.jar"/>
                <fileset dir="${test.lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${src.lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>

            <formatter type="xml"/>

            <batchtest fork="yes" todir="${test.reports.dir}">
                <fileset dir="${test.dir}/unit">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>

			<jvmarg value="-Demma.coverage.out.file=${reports.dir}/emma/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=false" />
        </junit>

        <junitreport todir="${test.reports.dir}">
            <fileset dir="${test.reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.reports.dir}/html"/>
        </junitreport>
    </target>
    
     <taskdef classpathref="run.server.classpath" resource="tasks.properties" loaderref="jetty.loader" />

	<taskdef resource="emma_ant.properties" classpathref="tools.classpath" />
	<property name="emma.enabled" value="true" />
	
	<target name="-emma.instrument" description="intrument src classes">
		<emma enabled="${emma.enabled}" >
		    <instr instrpath="${src.classes.dir}"
		         destdir="${emma.classes.dir}"
		         metadatafile="${reports.dir}/emma/metadata.emma"
		         merge="true"
		    />
		</emma>
	</target>
	
	<target name="-emma.report" description="generate emma report" >
		<emma enabled="${emma.enabled}" >
		    <report sourcepath="${src.dir}"
		          sort="+block,+name,+method,+class"
		          metrics="method:70,block:80,line:80,class:100"
		    >
		    <fileset dir="${reports.dir}/emma" >
		        <include name="*.emma" />
		    </fileset>

		    <html outfile="${reports.dir}/emma/coverage.html"
		        depth="method"
		        columns="name,class,method,block,line"
		    />
		    </report>
		</emma>
    </target>

     <target name="jetty.run">
       <jetty tempDirectory="jetty-temp">
         <webApp name="qdemo" warfile="${war.dir}" contextpath="/" />
       </jetty>
     </target>
    
    <!-- <target name="start.server">
        <java classname="JettyServer">
            <arg value="${war.dir}"/>
            <classpath>
                <path refid="run.server.classpath"/>
            </classpath>
        </java>
    </target>

    <target name="stop.server">
        <get src="http://localhost:8080/${context_path}/jetty/stop" dest="stop" ignoreerrors="true"/>
    </target> -->

    <!--target name="-run.function.test">
        <junit printsummary="yes" haltonfailure="yes" maxmemory="256m">
            <classpath>
                <pathelement location="${test.classes.dir}"/>
                <pathelement location="${src.classes.dir}"/>
                <fileset dir="${test.lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${src.lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>

            <formatter type="xml"/>

            <batchtest fork="yes" todir="${test.reports.dir}">
                <fileset dir="${test.dir}/func">
                    <include name="**/*Test*.java"/>
                    <exclude name="**/Abstract*Test*.java"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${test.reports.dir}">
            <fileset dir="${test.reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.reports.dir}/html"/>
        </junitreport>
    </target>

    <target name="-start.server.internal">
        <java classname="JettyServer" spawn="false" fork="true">
            <arg value="${war.dir}"/>
            <classpath>
                <path refid="run.server.classpath"/>
            </classpath>
        </java>
    </target>

    <target name="-run.function.test.parallel">
        <parallel>
            <daemons>
                <antcall target="-start.server.internal"/>
            </daemons>
            <sequential>
                <waitfor maxwait="120" maxwaitunit="second" checkevery="5" checkeveryunit="second">
                    <http url="http://localhost:${port}/${context_path}"/>
                </waitfor>
                <antcall target="-run.function.test"/>
                <antcall target="-stop.server"/>
            </sequential>
        </parallel>
    </target>


    <target name="-create.test.data">
        <java classname="com.cosco.wfi.preparedata.PrepareDataFactory">
            <classpath>
                <pathelement location="${src.classes.dir}"/>
                <path refid="compile.test.classpath"/>
            </classpath>
        </java>
    </target>

    <target name="-clear.all.data">
        <java classname="com.cosco.wfi.preparedata.CleanDataFactory">
            <classpath>
                <pathelement location="${src.classes.dir}"/>
                <path refid="compile.test.classpath"/>
            </classpath>
        </java>
    </target-->

    <!-- check style -->
    <!--property name="checkstyle.dir" value="${test.lib.dir}/checkstyle"/>
    <taskdef resource="checkstyletask.properties" classpath="${checkstyle.dir}/checkstyle-all-4.4.jar"/>
    <target name="-checkstyle">
        <property name="styleReport.dir" value="${reports.dir}/style"/>
        <mkdir dir="${styleReport.dir}"/>

        <checkstyle config="${checkstyle.dir}/check_rules.xml"
                    failonviolation="true"
                    maxerrors="10">
            <formatter type="plain"/>
            <classpath refid="compile.test.classpath"/>
            <classpath location="${src.classes.dir}"/>
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
        </checkstyle>
    </target-->

    <!--find duplicated code-->
    <!--property name="cpd.dir" value="${test.lib.dir}/pmd"/>
    <path id="cpd.classpath">
        <fileset dir="${cpd.dir}"/>
    </path>
    <taskdef name="cpd" classpathref="cpd.classpath" classname="net.sourceforge.pmd.cpd.CPDTask"/>

    <target name="-findDuplicatedCode">
        <property name="cpdReport.dir" value="${reports.dir}/cpd"/>
        <mkdir dir="${cpdReport.dir}"/>
        <cpd minimumtokencount="100" format="xml" outputfile="${cpdReport.dir}/cpd.xml">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
        </cpd>
        <xslt in="${cpdReport.dir}/cpd.xml" style="${cpd.dir}/cpdhtml.xslt"
              out="${cpdReport.dir}/cpd.html"/>
    </target-->

    <!--target name="-check.dependency">
        <echo message="${ant.home}"/>
        <property name="dependencyReport.dir" value="${reports.dir}/dependency"/>
        <mkdir dir="${dependencyReport.dir}"/>
        <jdepend format="xml" outputfile="${dependencyReport.dir}/dependency.xml">
            <exclude name="java.*"/>
            <exclude name="javax.*"/>
            <exclude name="net.*"/>
            <exclude name="org.*"/>
            <exclude name="junit.*"/>
            <exclude name="jxl"/>
            <exclude name="jxl.*"/>
            <exclude name="com.opensymphony.*"/>
            <exclude name="de.*"/>
            <exclude name="com.sun.*"/>

            <classespath>
                <path location="${src.classes.dir}"/>
            </classespath>
        </jdepend>
        <xslt in="${dependencyReport.dir}/dependency.xml"
              style="${ant.home}/etc/jdepend-frames.xsl"
              out="${dependencyReport.dir}/dependecny.html"/>
    </target-->

    <!--target name="-start.selenium">
        <java jar="${test.lib.dir}/selenium/selenium-server.jar" fork="true">
        </java>
    </target>

    <target name="-jsunit">
        <copy todir="${jsunit.working.dir}" overwrite="true">
            <fileset dir="${jsunit.src.dir}"/>
        </copy>
        <copy todir="${jsunit.working.dir}/js" overwrite="true">
            <fileset dir="${js.src.dir}"/>
        </copy>
        <mkdir dir="${test.reports.dir}/jsunit"/>
        <ant dir="${jsunit.working.dir}" inheritall="false" inheritrefs="false">
            <property name="logsDirectory" value="${test.reports.dir}/jsunit"/>
            <property name="closeBrowsersAfterTestRuns" value="${jsunit.closeBrowsers}"/>
        </ant>
    </target-->
    
    <!-- <target name="start-server">
        <java jar="${test.lib.dir}/selenium-server-standalone-2.0b1.jar"
              fork="true"
              spawn="true">

            <arg line="-proxyInjectionMode"/>
        </java>

        <waitfor maxwait="30" maxwaitunit="second">
            <and>
                 <socket server="localhost" port="4444"/>
                 <http url="http://localhost:4444/selenium-server/core/index.html" errorsBeginAt="404"/>
            </and>
        </waitfor>
    </target>
    
    <target name="stop-server">
        <get taskname="selenium-shutdown" src="http://localhost:4444/selenium-server/driver/?cmd=shutDownSeleniumServer"
            dest="result.txt" ignoreerrors="true" />
        <echo taskname="selenium-shutdown" message="DGF Errors during shutdown are expected" />
    </target> -->

    <target name="--init" depends="-clean, -init"/>
    <target name="--compile.src" depends="--init, -compile.src"/>
    <target name="--compile.all" depends="--compile.src, -compile.test"/>
	<target name="--run.unit.test" depends="--compile.all, -emma.instrument, -run.unit.test"/>
	<target name="--checkstyle" depends="-init, -checkstyle"/>
    <target name="--package" depends="-build.war, -package"/>
	<target name="--all" depends="--init, --compile.all, --run.unit.test, -emma.report, --checkstyle, -findbugs, --package"/>

	<target name="all" depends="--all" description="run all"/>
    <target name="clean" depends="-clean" description="clean all"/>
	<target name="compile" depends="--compile.all" description="compile all"/>
    <target name="checkstyle" depends="--checkstyle" description="run checkstyle"/>
    <target name="findbugs" depends="-findbugs" description="run findbugs"/>
	<target name="ut" depends="--run.unit.test" description="run unit tests"/>
	<target name="coverage" depends="-emma.report" description="generate emma report"/>
    <target name="package" depends="--package" description="create war package"/>

</project>
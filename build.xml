<project name="qdemo" default="all">

    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="tools.lib.dir" value="${lib.dir}/tools"/>
    <property name="panopticode.dir" value="${tools.lib.dir}/panopticode"/>
    <property name="findbugs.dir" value="${tools.lib.dir}/findbugs-1.3.9"/>

    <property name="src.dir" value="${basedir}/src"/>
    <property name="src.lib.dir" value="${lib.dir}/production"/>

    <property name="test.dir" value="${basedir}/test"/>
    <property name="test.lib.dir" value="${lib.dir}/test"/>

    <property name="websrc.dir" value="${basedir}/webapp"/>

    <property name="build.dir" value="${basedir}/build"/>
    <property name="src.classes.dir" value="${build.dir}/production"/>
    <property name="test.classes.dir" value="${build.dir}/test"/>
    <property name="emma.classes.dir" value="${build.dir}/emma"/>
    <property name="war.dir" value="${build.dir}/war"/>
    <property name="reports.dir" value="${build.dir}/reports"/>
    <property name="ut.reports.dir" value="${reports.dir}/ut"/>
    <property name="staticcheck.reports.dir" value="${reports.dir}/staticcheck"/>
	<property name="emma.reports.dir" value="${reports.dir}/emma"/>

    <property name="web.classes.dir" value="${war.dir}/WEB-INF/classes"/>

    <path id="compile.src.classpath">
        <fileset dir="${src.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="compile.test.classpath">
        <fileset dir="${test.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="tools.classpath">
        <fileset dir="${panopticode.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${findbugs.dir}">
            <include name="**/*.jar"/>
        </fileset>
		<fileset dir="${tools.lib.dir}/pmd">
			<include name="**/*.jar"/>
		</fileset>
    </path>

    <path id="run.server.classpath">
        <fileset dir="${test.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement location="${test.classes.dir}"/>
    </path>

    <target name="-init">
        <mkdir dir="${src.classes.dir}"/>
        <mkdir dir="${war.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${emma.classes.dir}"/>
        <mkdir dir="${web.classes.dir}"/>
        <mkdir dir="${ut.reports.dir}"/>
        <mkdir dir="${staticcheck.reports.dir}"/>
		<mkdir dir="${emma.reports.dir}"/>
    </target>

    <target name="-clean">
        <delete dir="${build.dir}" failonerror="false"/>
    </target>

    <target name="-compile.src">
        <javac classpathref="compile.src.classpath" memorymaximumsize="128m" fork="true" encoding="UTF-8"
               srcdir="${src.dir}"
               destdir="${src.classes.dir}" debug="true" source="1.5" target="1.5"/>
        <copy todir="${src.classes.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>
    </target>

    <target name="-compile.test">
        <javac classpathref="compile.test.classpath" memorymaximumsize="128m" fork="true" encoding="UTF-8"
               destdir="${test.classes.dir}" debug="true">
            <src path="${test.dir}"/>
            <classpath path="${src.classes.dir}"/>
        </javac>
    </target>

    <target name="-checkstyle">
    	<taskdef resource="checkstyletask.properties" classpathref="tools.classpath"/>
        <checkstyle config="${tools.lib.dir}/panopticode/supplements/checkstyle/etc/sun_checks.xml"
                    failureProperty="checkstyle.failure"
                    failOnViolation="false">
            <formatter type="xml" tofile="${staticcheck.reports.dir}/checkstyle_report.xml"/>
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </checkstyle>

        <xslt in="${staticcheck.reports.dir}/checkstyle_report.xml"
              out="${staticcheck.reports.dir}/checkstyle_report.html"
              style="${tools.lib.dir}/panopticode/supplements/checkstyle/xslt/checkstyle-noframes.xsl"/>
    </target>

    <target name="-findbugs">
        <typedef name="findbugs"
                 classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
                 classpathref="tools.classpath"
                 loaderref="findbugs.path.loader"
                />
        <findbugs home="${tools.lib.dir}/findbugs-1.3.9"
                  output="html"
                  jvmArgs="-Xms256m -Xmx800m"
                  outputFile="${staticcheck.reports.dir}/findbugs.html">
            <sourcePath path="${srcdir}"/>
            <class location="${src.classes.dir}"/>
        </findbugs>
    </target>

	<target name="-javadoc">
		<javadoc classpathref="tools.classpath"
                 sourcepath="${src.dir}"
                 access="private">
          <fileset dir="${src.dir}" />
          <doclet name="org.panopticode.doclet.PanopticodeDoclet"
                  pathref="tools.classpath">
            <param name="-debug" value="true" />
            <param name="-projectName" value="${project.name}" />
            <param name="-projectVersion" value="1.0" />
            <param name="-outputFile" value="${staticcheck.reports.dir}/panopticode.xml" />
          </doclet>
        </javadoc>
	</target>
	
	<target name="-javancss">
		<taskdef name="javancss" classname="javancss.JavancssAntTask" classpathref="tools.classpath" />

        <javancss srcdir="${src.dir}"
                  generateReport="true"
                  outputfile="${staticcheck.reports.dir}/javancss.xml"
                  format="xml" />

        <xslt style="${panopticode.dir}/supplements/javancss/xslt/javancss2html.xsl"
              in="${staticcheck.reports.dir}/javancss.xml"
              out="${staticcheck.reports.dir}/javancss.html" />
	</target>
	
	<target name="-complexian">
		<taskdef resource="complexiantask.properties" classpathref="tools.classpath"/>

        <complexian failOnViolation="false" threshold="100">
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </complexian>
	</target>
	
	<target name="-simian">
		<taskdef resource="simiantask.properties" classpathref="tools.classpath"/>

        <simian language="java" threshold="10">
            <fileset dir="${src.dir}" includes="**/*.java"/>

            <formatter type="xml" toFile="${staticcheck.reports.dir}/simian.xml"/>
        </simian>
	</target>
	
	<target name="-jdepend">
		<taskdef name="jdepend" classname="org.apache.tools.ant.taskdefs.optional.jdepend.JDependTask" classpathref="tools.classpath"/>
        <jdepend format="xml" outputfile="${staticcheck.reports.dir}/jdepend.xml">
            <exclude name="java.*"/>
            <exclude name="javax.*"/>
            <classespath>
                <pathelement location="${src.classes.dir}" />
            </classespath>
            <classpath location="${src.classes.dir}" />
        </jdepend>

        <xslt style="${panopticode.dir}/supplements/jdepend/xslt/jdepend.xsl"
              in="${staticcheck.reports.dir}/jdepend.xml"
              out="${staticcheck.reports.dir}/jdepend.html" />
	</target>
	
	<target name="-treemap">
		<taskdef name="javancssPanopticode" classpathref="tools.classpath"
			classname="org.panopticode.supplement.ant.JavaNCSSPanopticode" />

		<javancssPanopticode
			panopticodeFile="${staticcheck.reports.dir}/panopticode.xml"
			javancssFile="${staticcheck.reports.dir}/javancss.xml" />
			
		<taskdef name="emmaPanopticode" classpathref="tools.classpath"
			classname="org.panopticode.supplement.ant.EmmaPanopticode" />
		<emmaPanopticode
			panopticodeFile="${staticcheck.reports.dir}/panopticode.xml" 
			emmaFile="${emma.reports.dir}/coverage.xml" />
		
		<report pluginClass="org.panopticode.report.treemap.ComplexityTreemap"
            panopticodeDir="${panopticode.dir}"
            panopticodeXmlFile="${staticcheck.reports.dir}/panopticode.xml"
            file="${staticcheck.reports.dir}/interactive-complexity-treemap.svg"
            interactive="-interactive" />

        <report pluginClass="org.panopticode.report.treemap.CoverageTreemap"
            panopticodeDir="${panopticode.dir}"
            panopticodeXmlFile="${staticcheck.reports.dir}/panopticode.xml"
            file="${staticcheck.reports.dir}/interactive-coverage-treemap.svg"
            interactive="-interactive" />			
	</target>
	
	<macrodef name="report">
        <attribute name="panopticodeDir" />
        <attribute name="pluginClass" />
        <attribute name="panopticodeXmlFile" />
        <attribute name="file" />
        <attribute name="interactive" default="" />

        <sequential>
            <java classpath="@{panopticodeDir}/panopticode.jar"
                  classname="org.panopticode.ReportRunner"
                  fork="true" >
              <arg value="@{pluginClass}"/>
              <arg value="@{panopticodeXmlFile}"/>
              <arg value="@{file}"/>
              <arg value="@{interactive}"/>
            </java>
        </sequential>
    </macrodef>

    <target name="-build.war">
        <copy todir="${web.classes.dir}">
            <fileset dir="${src.classes.dir}"/>
        </copy>
        <copy todir="${war.dir}">
            <fileset dir="${websrc.dir}"/>
        </copy>
        <copy todir="${war.dir}/WEB-INF/lib">
            <fileset dir="${src.lib.dir}"/>
        </copy>
    </target>

    <target name="-package">
        <war destfile="${build.dir}/qdemo.war">
            <fileset dir="${war.dir}"/>
        </war>
    </target>

    <target name="-run.unit.test">
        <junit printsummary="yes" haltonfailure="yes" fork="true" forkmode="perBatch">
            <classpath>
                <pathelement location="${emma.classes.dir}"/>
                <pathelement location="${test.classes.dir}"/>
                <pathelement location="${panopticode.dir}/supplements/emma/lib/emma.jar"/>
                <fileset dir="${test.lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${src.lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>

            <formatter type="xml"/>

            <batchtest fork="yes" todir="${ut.reports.dir}">
                <fileset dir="${test.dir}/unit">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>

            <jvmarg value="-Demma.coverage.out.file=${emma.reports.dir}/coverage.emma"/>
            <jvmarg value="-Demma.coverage.out.merge=false"/>
        </junit>

        <junitreport todir="${ut.reports.dir}">
            <fileset dir="${ut.reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${ut.reports.dir}/html"/>
        </junitreport>
    </target>

    <taskdef resource="emma_ant.properties" classpathref="tools.classpath"/>
    <property name="emma.enabled" value="true"/>

    <target name="-emma.instrument" description="intrument src classes">
        <emma enabled="${emma.enabled}">
            <instr instrpath="${src.classes.dir}"
                   destdir="${emma.classes.dir}"
                   metadatafile="${emma.reports.dir}/metadata.emma"
                   merge="true"
                    />
        </emma>
    </target>

    <target name="-emma.report" description="generate emma report">
        <emma enabled="${emma.enabled}">
            <report sourcepath="${src.dir}"
                    sort="+block,+name,+method,+class"
                    metrics="method:70,block:80,line:80,class:100">
                <fileset dir="${emma.reports.dir}">
                    <include name="*.emma"/>
                </fileset>

                <html outfile="${emma.reports.dir}/coverage.html"
                      depth="method"
                      columns="name,class,method,block,line"
                        />
				<xml outfile="${emma.reports.dir}/coverage.xml"
                      depth="method"
                      columns="name,class,method,block,line"
                        />
            </report>
        </emma>
    </target>

    <target name="-cpd">
	    <taskdef name="cpd" classpathref="tools.classpath" classname="net.sourceforge.pmd.cpd.CPDTask"/>
        <cpd minimumtokencount="10" format="xml" encoding="UTF-8" outputfile="${staticcheck.reports.dir}/cpd.xml">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
        </cpd>
        <xslt in="${staticcheck.reports.dir}/cpd.xml" style="${tools.lib.dir}/pmd/xslt/cpdhtml.xslt"
              out="${staticcheck.reports.dir}/cpd.html"/>
    </target>

    <target name="start.selenium">
        <java jar="${test.lib.dir}/selenium-server-standalone-2.0b1.jar"
              fork="true"
              spawn="true">
        </java>

        <waitfor maxwait="5" maxwaitunit="second">
            <and>
                <socket server="localhost" port="4444"/>
                <http url="http://localhost:4444/selenium-server/core/index.html" errorsBeginAt="404"/>
            </and>
        </waitfor>
    </target>

    <taskdef classpathref="run.server.classpath" resource="tasks.properties" loaderref="jetty.loader"/>
    <target name="server.run">
        <jetty tempDirectory="jetty-temp">
            <webApp name="qdemo" warfile="${war.dir}" contextpath="/"/>
        </jetty>
    </target>

    <target name="run.functional.test" depends="-compile.test">
        <antcall target="start.selenium"></antcall>

        <junit showoutput="true"
               outputtoformatters="true"
               printsummary="yes"
               haltonfailure="yes">
            <classpath>
                <pathelement location="${src.classes.dir}"/>
                <pathelement location="${test.classes.dir}"/>
                <fileset dir="${test.lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${src.lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>

            <formatter type="brief" usefile="false"/>

            <batchtest fork="yes" todir="${ut.reports.dir}">
                <fileset dir="${test.dir}/functional">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <antcall target="stop.selenium"></antcall>
    </target>

    <target name="stop.selenium">
        <get taskname="selenium-shutdown" src="http://localhost:4444/selenium-server/driver/?cmd=shutDownSeleniumServer"
             dest="result.txt" ignoreerrors="true"/>
        <echo taskname="selenium-shutdown" message="DGF Errors during shutdown are expected"/>
    </target>

    <target name="--init" depends="-clean, -init"/>
    <target name="--compile.src" depends="--init, -compile.src"/>
    <target name="--compile.all" depends="--compile.src, -compile.test"/>
    <target name="--run.unit.test" depends="--compile.all, -emma.instrument, -run.unit.test"/>
    <target name="--checkstyle" depends="-init, -checkstyle"/>
    <target name="--package" depends="-build.war, -package"/>
    <target name="--all"
            depends="--init, --compile.all, --run.unit.test, -emma.report, --checkstyle, -findbugs, --treemap, --package"/>
    <target name="--treemap" depends="-javadoc, -javancss, -treemap"/>

    <target name="all" depends="--all" description="run all"/>
    <target name="init" depends="--init" description="init"/>
    <target name="clean" depends="-clean" description="clean all"/>
    <target name="compile" depends="--compile.all" description="compile all"/>
    <target name="ut" depends="--run.unit.test" description="run unit tests"/>
    <target name="coverage" depends="-emma.report" description="generate emma report"/>
    <target name="package" depends="--package" description="create war package"/>

    <target name="checkstyle" depends="--checkstyle" description="run checkstyle"/>
    <target name="findbugs" depends="-findbugs" description="run findbugs"/>
    <target name="treemap" depends="--treemap" description="generate treemap report"/>
    <target name="simian" depends="-simian" description="generate simian report"/>
    <target name="complexian" depends="-complexian" description="check complexian"/>
    <target name="jdepend" depends="-jdepend" description="generate dependency report"/>
	<target name="cpd" depends="-cpd" description="detect duplication"/>

</project>